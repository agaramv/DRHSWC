"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const rules_1 = require("../rules");
const utils_1 = require("../utils");
const themePackageName = (options) => {
    if (!options.theme)
        return '';
    return `@progress/kendo-theme-${options.theme}`;
};
const themePath = (name) => `node_modules/${name}/dist/all.css`;
function importTheme(options) {
    const name = themePackageName(options);
    if (!name)
        return schematics_1.noop();
    const dependencies = {
        [name]: 'latest'
    };
    return schematics_1.chain([
        rules_1.addToPackageJson({ dependencies }),
        (host, context) => {
            const workspace = utils_1.getWorkspace(host);
            const project = utils_1.getProjectFromWorkspace(workspace, options.project);
            if (project.architect) {
                addStyleToTarget(project.architect['build'], host, themePath(name), workspace);
                addStyleToTarget(project.architect['test'], host, themePath(name), workspace);
            }
            else {
                throw new schematics_1.SchematicsException(`${project.name} does not have an architect configuration`);
            }
            return host;
        }
    ]);
}
exports.importTheme = importTheme;
function addStyleToTarget(target, host, asset, workspace) {
    const styleEntry = { input: asset };
    // We can't assume that any of these properties are defined, so safely add them as we go
    // if necessary.
    if (!target.options) {
        target.options = { styles: [styleEntry] };
    }
    else if (!target.options.styles) {
        target.options.styles = [styleEntry];
    }
    else {
        const existingStyles = target.options.styles.map(s => typeof s === 'string' ? s : s.input);
        const hasGivenTheme = existingStyles.find(s => s.includes(asset));
        const hasOtherTheme = existingStyles.find(s => s.includes('@progress/kendo-theme'));
        if (!hasGivenTheme && !hasOtherTheme) {
            target.options.styles.splice(0, 0, styleEntry);
        }
    }
    host.overwrite('angular.json', JSON.stringify(workspace, null, 2));
}
