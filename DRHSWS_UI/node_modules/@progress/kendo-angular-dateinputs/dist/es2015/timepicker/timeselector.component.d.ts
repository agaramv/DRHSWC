import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, QueryList, OnInit, OnChanges, OnDestroy } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { IntlService } from '@progress/kendo-angular-intl';
import { TimeListComponent } from './timelist.component';
import { DOMService } from './services/dom.service';
import { TimePickerIncrementalSteps } from './models/incremental-steps.model';
/**
 * @hidden
 *
 * Represents the Kendo UI TimeSelector component for Angular.
 */
export declare class TimeSelectorComponent implements OnChanges, OnInit, OnDestroy {
    localization: LocalizationService;
    private cdr;
    private element;
    intl: IntlService;
    dom: DOMService;
    private zone;
    accept: ElementRef;
    cancel: ElementRef;
    now: ElementRef;
    timeLists: QueryList<TimeListComponent>;
    /**
     * Specifies the time format used to display the time list columns.
     */
    format: string;
    /**
     * Specifies the smallest valid time value.
     */
    min: Date;
    /**
     * Specifies the biggest valid time value.
     */
    max: Date;
    /**
     * Determines whether to display the **Cancel** button in the popup.
     */
    cancelButton: boolean;
    /**
     * Determines whether to display the **Now** button in the popup.
     *
     * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.
     */
    nowButton: boolean;
    /**
     * Configures the incremental steps of the TimeSelector.
     *
     * The available options are:
     * - `hour: Number`&mdash;Controls the incremental step of the hour value.
     * - `minute: Number`&mdash;Controls the incremental step of the minute value.
     * - `second: Number`&mdash;Controls the incremental step of the second value.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <kendo-timeselector format="HH:mm:ss" [steps]="steps"></kendo-timeselector>
     * `
     * })
     * class AppComponent {
     *   public steps = { hour: 2, minute: 15, second: 15 };
     * }
     * ```
     *
     * > If the incremental step is greater than `1`, the **Now** button will be hidden.
     */
    steps: TimePickerIncrementalSteps;
    /**
     * Specifies the value of the TimeSelector component.
     */
    value: Date;
    /**
     * Fires each time the user selects a new value.
     */
    valueChange: EventEmitter<Date>;
    /**
     * Fires each time the user cancels the selected value.
     */
    valueReject: EventEmitter<any>;
    /**
     * Fires each time the user focuses the input element.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <kendo-timeselector (focus)="handleFocus()"></kendo-timeselector>
     * `
     * })
     * class AppComponent {
     *   public handleFocus(): void {
     *      console.log("Component is focused");
     *   }
     * }
     * ```
     *
     * > To wire the event programmatically, use the `onFocus` property.
     */
    onFocus: EventEmitter<any>;
    /**
     * Fires each time the input element gets blurred.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <kendo-timeselector (blur)="handleBlur()"></kendo-timeselector>
     * `
     * })
     * class AppComponent {
     *   public handleBlur(): void {
     *      console.log("Component is blurred");
     *   }
     * }
     * ```
     *
     * > To wire the event programmatically, use the `onBlur` property.
     */
    onBlur: EventEmitter<any>;
    activeListIndex: number;
    dateFormatParts: any[];
    isActive: boolean;
    showNowButton: boolean;
    current: Date;
    private mergeValue;
    private snapTime;
    private resolvedPromise;
    private _current;
    private _steps;
    private subscriptions;
    /**
     * @hidden
     */
    readonly componentClass: boolean;
    /**
     * @hidden
     */
    handleKeydown(event: any): void;
    constructor(localization: LocalizationService, cdr: ChangeDetectorRef, element: ElementRef, intl: IntlService, dom: DOMService, zone: NgZone);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngOnChanges(_: any): void;
    ngOnDestroy(): void;
    /**
     * Focuses the TimeSelector component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="timeselector.focus()">Focus time picker</button>
     *  <kendo-timeselector #timeselector></kendo-timeselector>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    focus(): void;
    /**
     * Blurs the TimeSelector component.
     */
    blur(): void;
    /**
     * @hidden
     */
    handleAccept(): void;
    /**
     * @hidden
     */
    handleNow(): void;
    /**
     * @hidden
     */
    handleReject(): void;
    /**
     * @hidden
     */
    handleFocus(): void;
    /**
     * @hidden
     */
    handleListFocus(index: number): void;
    /**
     * @hidden
     */
    handleBlur(): void;
    partStep(part: any): number;
    private init(changes?);
    private focusList(dir);
    private handleChange(value);
    private hasActiveComponent();
    private hasActiveTimeList();
    private hasActiveButton();
    private hasSteps();
    private nextTick(f);
    private verifyFormat();
    private intlChange();
}
