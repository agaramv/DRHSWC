"use strict";
/* tslint:disable:max-line-length */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var kendo_angular_popup_1 = require("@progress/kendo-angular-popup");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var defaults_1 = require("../defaults");
var min_validator_1 = require("../validators/min.validator");
var max_validator_1 = require("../validators/max.validator");
var preventable_event_1 = require("../preventable-event");
var view_enum_1 = require("../calendar/models/view.enum");
var cell_template_directive_1 = require("../calendar/templates/cell-template.directive");
var month_cell_template_directive_1 = require("../calendar/templates/month-cell-template.directive");
var year_cell_template_directive_1 = require("../calendar/templates/year-cell-template.directive");
var decade_cell_template_directive_1 = require("../calendar/templates/decade-cell-template.directive");
var century_cell_template_directive_1 = require("../calendar/templates/century-cell-template.directive");
var weeknumber_cell_template_directive_1 = require("../calendar/templates/weeknumber-cell-template.directive");
var header_title_template_directive_1 = require("../calendar/templates/header-title-template.directive");
var navigation_item_template_directive_1 = require("../calendar/templates/navigation-item-template.directive");
var util_1 = require("../util");
var touch_enabled_1 = require("../touch-enabled");
var MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/DatePickerComponent/#toc-min';
var MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/DatePickerComponent/#toc-max';
var VALUE_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/datepicker/#toc-using-with-json';
var SELECTED_REGEXP = /k-state-selected/;
var isSelectedCell = function (target, calendar) {
    if (!target || !calendar || target === calendar) {
        return false;
    }
    var isSelected = target.nodeName.toLowerCase() === 'td' && SELECTED_REGEXP.test(target.className);
    return isSelected || isSelectedCell(target.parentNode, calendar);
};
/**
 * Represents the [Kendo UI DatePicker component for Angular]({% slug overview_datepicker %}#toc-basic-usage).
 */
var DatePickerComponent = /** @class */ (function () {
    function DatePickerComponent(zone, localization, cdr, popupService, element, renderer, touchEnabled) {
        this.zone = zone;
        this.localization = localization;
        this.cdr = cdr;
        this.popupService = popupService;
        this.element = element;
        this.renderer = renderer;
        this.touchEnabled = touchEnabled;
        /**
         * @hidden
         */
        this.focusableId = "k-" + util_1.guid();
        /**
         * Defines the active view that the Calendar initially renders
         * (see the [basic usage example]({% slug activeview_datepicker %})).
         * By default, the active view is `month`.
         *
         * > You have to set `activeView` within the `topView`-`bottomView` range.
         */
        this.activeView = view_enum_1.CalendarViewEnum[view_enum_1.CalendarViewEnum.month];
        /**
         * Defines the bottommost Calendar view, to which the user can navigate
         * (see the [basic usage example]({% slug dates_datepicker %}#toc-partial-dates)).
         */
        this.bottomView = view_enum_1.CalendarViewEnum[view_enum_1.CalendarViewEnum.month];
        /**
         * Defines the topmost Calendar view, to which the user can navigate
         * (see the [basic usage example]({% slug dates_datepicker %}#toc-partial-dates)).
         */
        this.topView = view_enum_1.CalendarViewEnum[view_enum_1.CalendarViewEnum.century];
        /**
         * Sets or gets the `disabled` property of the DatePicker and determines whether the component is active
         * (see the [basic usage example]({% slug disabled_datepicker %})).
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the DatePicker
         * (see the [basic usage example]({% slug readonly_datepicker %})).
         */
        this.readonly = false;
        /**
         * Sets or gets the `navigation` property of the Calendar
         * and determines whether the navigation side-bar is displayed.
         * (see the [basic usage example]({% slug sidebar_datepicker %})).
         */
        this.navigation = true;
        /**
         * Specifies the smallest valid date
         * (see the [basic usage example]({% slug dateranges_datepicker %})).
         */
        this.min = kendo_date_math_1.cloneDate(defaults_1.MIN_DATE);
        /**
         * Specifies the biggest valid date
         * (see the [basic usage example]({% slug dateranges_datepicker %})).
         */
        this.max = kendo_date_math_1.cloneDate(defaults_1.MAX_DATE);
        /**
         * Specifies the focused date of the Calendar component
         * (see the [basic usage example]({% slug dates_datepicker %})).
         */
        this.focusedDate = null;
        /**
         * Specifies the date format that is used to display the input value
         * (see the [basic usage example]({% slug formats_datepicker %})).
         */
        this.format = "d";
        /**
         * Specifies the hint the DatePicker displays when its value is `null`.
         * For more information, refer to the article on
         * [placeholders]({% slug placeholders_datepicker %}).
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-datepicker placeholder="Enter birth date..."></kendo-datepicker>
         * `
         * })
         * class AppComponent { }
         * ```
         */
        this.placeholder = "";
        /**
         * Sets or gets the `tabindex` property of the DatePicker.
         */
        this.tabindex = 0;
        /**
         * Sets the title of the input element of the DatePicker.
         */
        this.title = "";
        /**
         * Determines whether the built-in min or max validators are enforced when validating a form.
         */
        this.rangeValidation = true;
        /**
         * Determines whether to display a week number column in the `month` view of the Calendar
         * (see the [basic usage example]({% slug weeknumcolumn_datepicker %})).
         */
        this.weekNumber = false;
        /**
         * Fires each time the user selects a new value.
         * For more information, refer to the section on
         * [events]({% slug overview_datepicker %}#toc-events).
         */
        this.valueChange = new core_1.EventEmitter();
        /**
         * Fires each time the user focuses the input element.
         * For more information, refer to the section on
         * [events]({% slug overview_datepicker %}#toc-events).
         *
         * > To wire the event programmatically, use the `onFocus` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-datepicker (focus)="handleFocus()"></kendo-datepicker>
         * `
         * })
         * class AppComponent {
         *   public handleFocus(): void {
         *      console.log("Component is focused");
         *   }
         * }
         * ```
         */
        this.onFocus = new core_1.EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the input element gets blurred.
         * For more information, refer to the section on
         * [events]({% slug overview_datepicker %}#toc-events).
         *
         * > To wire the event programmatically, use the `onBlur` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-datepicker (blur)="handleBlur()"></kendo-datepicker>
         * `
         * })
         * class AppComponent {
         *   public handleBlur(): void {
         *      console.log("Component is blurred");
         *   }
         * }
         * ```
         */
        this.onBlur = new core_1.EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed.
         * For more information, refer to the section on
         * [events]({% slug overview_datepicker %}#toc-events).
         */
        this.open = new core_1.EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open.
         * For more information, refer to the section on
         * [events]({% slug overview_datepicker %}#toc-events).
         */
        this.close = new core_1.EventEmitter();
        this.isActive = false;
        this.popupUID = util_1.guid();
        this._popupSettings = { animate: true };
        this._show = false;
        this._value = null;
        this.onChange = util_1.noop;
        this.onTouched = util_1.noop;
        this.minValidateFn = util_1.noop;
        this.maxValidateFn = util_1.noop;
        this.resolvedPromise = Promise.resolve(null);
        this.popupKeyDownHandler = this.handleKeydown.bind(this);
    }
    Object.defineProperty(DatePickerComponent.prototype, "popupSettings", {
        get: function () {
            return this._popupSettings;
        },
        /**
         * Configures the popup options of the DatePicker.
         *
         * The available options are:
         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
         */
        set: function (settings) {
            this._popupSettings = Object.assign({}, { animate: true }, settings);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Specifies the value of the DatePicker component.
         *
         * > The `value` has to be a valid
         * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.
         */
        set: function (value) {
            this.verifyValue(value);
            this._value = kendo_date_math_1.cloneDate(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "show", {
        get: function () {
            return this._show;
        },
        set: function (show) {
            if (show && (this.disabled || this.readonly)) {
                return;
            }
            var event = new preventable_event_1.PreventableEvent();
            if (!this._show && show) {
                this.open.emit(event);
            }
            else if (this._show && !show) {
                this.close.emit(event);
            }
            if (event.isDefaultPrevented()) {
                return;
            }
            this._toggle(show);
            this.toggleFocus();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DatePickerComponent.prototype.wrapperClasses = function () {
        return true;
    };
    Object.defineProperty(DatePickerComponent.prototype, "disabledClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DatePickerComponent.prototype.handleKeydown = function (event) {
        var altKey = event.altKey, keyCode = event.keyCode;
        if (keyCode === 27) {
            this.show = false;
        }
        if (altKey) {
            if (keyCode === 40 && !this.show) {
                this.show = true;
            }
            if (keyCode === 38) {
                this.show = false;
            }
        }
    };
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    DatePickerComponent.prototype.isEmpty = function () {
        return this.input.isEmpty();
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.renderer.removeAttribute(this.element.nativeElement, 'tabindex');
        this.localizationChangeSubscription = this.localization
            .changes
            .subscribe(function () { return _this.cdr.markForCheck(); });
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.ngOnChanges = function (changes) {
        this.verifySettings();
        if (changes.min || changes.max) {
            this.minValidateFn = this.rangeValidation ? min_validator_1.minValidator(this.min) : util_1.noop;
            this.maxValidateFn = this.rangeValidation ? max_validator_1.maxValidator(this.max) : util_1.noop;
        }
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.nextTickId);
        this.isActive = false;
        this.show = false;
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
    };
    Object.defineProperty(DatePickerComponent.prototype, "isOpen", {
        /**
         * Returns the current open state of the popup.
         */
        get: function () {
            return this.show;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DatePickerComponent.prototype.writeValue = function (value) {
        this.verifyValue(value);
        this.value = kendo_date_math_1.cloneDate(value);
        this.cdr.markForCheck();
        if (!value) {
            this.input.writeValue(value);
        }
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.validate = function (control) {
        return this.minValidateFn(control) || this.maxValidateFn(control);
    };
    /**
     * Focuses the DatePicker component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="datepicker.focus()">Focus date picker</button>
     *  <kendo-datepicker #datepicker></kendo-datepicker>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    DatePickerComponent.prototype.focus = function () {
        this.input.focus();
    };
    /**
     * Blurs the DatePicker component.
     */
    DatePickerComponent.prototype.blur = function () {
        (this.calendar || this.input)['blur'](); //tslint:disable-line:no-string-literal
    };
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,
     * the `open` and `close` events do not fire.
     *
     * @param show - The state of the popup.
     */
    DatePickerComponent.prototype.toggle = function (show) {
        var _this = this;
        if (this.disabled || this.readonly) {
            return;
        }
        this.resolvedPromise.then(function () {
            _this._toggle((show === undefined) ? !_this.show : show);
        });
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.handleIconClick = function () {
        if (this.disabled || this.readonly) {
            return;
        }
        this.focusInput();
        //XXX: explicitly call the handleFocus handler here
        //due to async IE focus event
        this.handleFocus();
        this.show = !this.show;
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.handleCalendarClick = function (event) {
        var currentTarget = event.currentTarget, target = event.target;
        if (this.show && isSelectedCell(target, currentTarget)) {
            this.focusInput();
            this.show = false;
        }
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.handleChange = function (value) {
        this.cdr.markForCheck();
        this.focusInput();
        this.value = value;
        this.show = false;
        this.onChange(kendo_date_math_1.cloneDate(value));
        this.valueChange.emit(kendo_date_math_1.cloneDate(value));
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.handleInputChange = function (value) {
        this.handleChange(this.input.formatSections.time ? value : this.mergeTime(value));
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.handleFocus = function () {
        var _this = this;
        if (this.isActive) {
            return;
        }
        this.isActive = true;
        this.nextTick(function () {
            if (!_this.hasActiveComponent()) {
                return;
            }
            _this.onFocus.emit();
        });
    };
    /**
     * @hidden
     */
    DatePickerComponent.prototype.handleBlur = function () {
        var _this = this;
        this.nextTick(function () {
            if (_this.hasActiveComponent()) {
                return;
            }
            _this.isActive = false; // order is important ¯\_(ツ)_/¯
            _this.show = false;
            _this.cdr.detectChanges();
            _this.onTouched();
            _this.onBlur.emit();
        });
    };
    Object.defineProperty(DatePickerComponent.prototype, "popupClasses", {
        /**
         * @hidden
         */
        get: function () {
            return [
                'k-calendar-container',
                'k-group',
                'k-reset'
            ].concat(this.popupSettings.popupClass || []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerComponent.prototype, "appendTo", {
        /**
         * @hidden
         */
        get: function () {
            var appendTo = this.popupSettings.appendTo;
            if (!appendTo || appendTo === 'root') {
                return undefined;
            }
            return appendTo === 'component' ? this.container : appendTo;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    DatePickerComponent.prototype.mergeTime = function (value) {
        return this.value && value ? util_1.setTime(value, this.value) : value;
    };
    DatePickerComponent.prototype._toggle = function (show) {
        var _this = this;
        this._show = show;
        if (this.popupRef) {
            this.popupRef
                .popupElement
                .removeEventListener('keydown', this.popupKeyDownHandler);
            this.popupRef.close();
            this.popupRef = null;
            this.subscription.unsubscribe();
        }
        if (this._show) {
            var direction = this.localization.rtl ? 'right' : 'left';
            this.popupRef = this.popupService.open({
                anchor: this.wrapper,
                anchorAlign: { vertical: 'bottom', horizontal: direction },
                animate: this.popupSettings.animate,
                appendTo: this.appendTo,
                content: this.popupTemplate,
                popupAlign: { vertical: 'top', horizontal: direction },
                popupClass: this.popupClasses,
                positionMode: 'absolute'
            });
            this.popupRef.popupElement.setAttribute('id', this.popupUID);
            this.popupRef.popupElement.addEventListener('keydown', this.popupKeyDownHandler);
            this.subscription = this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.show = false; });
        }
    };
    DatePickerComponent.prototype.focusInput = function () {
        if (this.touchEnabled) {
            return;
        }
        this.input.focus();
    };
    DatePickerComponent.prototype.toggleFocus = function () {
        if (!this.isActive) {
            return;
        }
        if (this.show) {
            if (!this.calendar) {
                this.cdr.detectChanges();
            }
            if (this.calendar) {
                this.calendar.focus();
            }
        }
        else {
            this.focusInput();
        }
    };
    DatePickerComponent.prototype.hasActiveComponent = function () {
        return this.input.isActive || (this.calendar && this.calendar.isActive);
    };
    DatePickerComponent.prototype.verifySettings = function () {
        if (!core_1.isDevMode()) {
            return;
        }
        if (!util_1.isValidRange(this.min, this.max)) {
            throw new Error("The max value should be bigger than the min. See " + MIN_DOC_LINK + " and " + MAX_DOC_LINK + ".");
        }
    };
    DatePickerComponent.prototype.verifyValue = function (value) {
        if (!core_1.isDevMode()) {
            return;
        }
        if (value && !(value instanceof Date)) {
            throw new Error("The 'value' should be a valid JavaScript Date instance. Check " + VALUE_DOC_LINK + " for possible resolution.");
        }
    };
    DatePickerComponent.prototype.nextTick = function (f) {
        var _this = this;
        //XXX: use setTimeout due to async focus/blur events in IE
        //XXX: run the callback in the zone to give template updates for the parent component
        this.zone.runOutsideAngular(function () {
            _this.nextTickId = setTimeout(function () { return _this.zone.run(function () { return f(); }); });
        });
    };
    DatePickerComponent.decorators = [
        { type: core_1.Component, args: [{
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                    exportAs: 'kendo-datepicker',
                    providers: [
                        { provide: forms_1.NG_VALUE_ACCESSOR, useExisting: core_1.forwardRef(function () { return DatePickerComponent; }), multi: true },
                        { provide: forms_1.NG_VALIDATORS, useExisting: core_1.forwardRef(function () { return DatePickerComponent; }), multi: true },
                        kendo_angular_l10n_1.LocalizationService,
                        {
                            provide: kendo_angular_l10n_1.L10N_PREFIX,
                            useValue: 'kendo.datepicker'
                        }
                    ],
                    selector: 'kendo-datepicker',
                    template: "\n        <ng-container kendoDatePickerLocalizedMessages\n            i18n-today=\"kendo.datepicker.today|The label for the today button in the calendar header\"\n            today=\"TODAY\"\n\n            i18n-toggle=\"kendo.datepicker.toggle|The label for the toggle button in the datepicker component\"\n            toggle=\"Toggle calendar\"\n        >\n        </ng-container>\n        <span #wrapper\n            class=\"k-picker-wrap k-state-default\"\n            [class.k-state-disabled]=\"disabled\"\n            [class.k-state-focused]=\"isActive\"\n        >\n            <kendo-dateinput\n                #input\n                [focusableId]=\"focusableId\"\n                [hasPopup]=\"true\"\n                [isPopupOpen]=\"show\"\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [tabindex]=\"!show ? tabindex : -1\"\n                [title]=\"title\"\n                [format]=\"format\"\n                [formatPlaceholder]=\"formatPlaceholder\"\n                [placeholder]=\"placeholder\"\n                [min]=\"min\"\n                [max]=\"max\"\n                [value]=\"value\"\n                (valueChange)=\"handleInputChange($event)\"\n                (focus)=\"handleFocus()\"\n                (blur)=\"handleBlur()\"\n            ></kendo-dateinput>\n            <span class=\"k-select\"\n                role=\"button\"\n                [attr.title]=\"localization.get('toggle')\"\n                [attr.aria-label]=\"localization.get('toggle')\"\n                [attr.aria-controls]=\"popupUID\"\n                (mousedown)=\"$event.preventDefault()\"\n                (click)=\"handleIconClick()\"\n            >\n                <span class=\"k-icon k-i-calendar\"></span>\n            </span>\n        </span>\n        <ng-container #container></ng-container>\n        <ng-template #popupTemplate>\n            <kendo-calendar\n                #calendar\n                [min]=\"min\"\n                [max]=\"max\"\n                [navigation]=\"navigation\"\n                [activeView]=\"activeView\"\n                [bottomView]=\"bottomView\"\n                [topView]=\"topView\"\n                [weekNumber]=\"weekNumber\"\n                [cellTemplate]=\"cellTemplate\"\n                [monthCellTemplate]=\"monthCellTemplate\"\n                [yearCellTemplate]=\"yearCellTemplate\"\n                [decadeCellTemplate]=\"decadeCellTemplate\"\n                [centuryCellTemplate]=\"centuryCellTemplate\"\n                [weekNumberTemplate]=\"weekNumberTemplate\"\n                [headerTitleTemplate]=\"headerTitleTemplate\"\n                [navigationItemTemplate]=\"navigationItemTemplate\"\n                [focusedDate]=\"focusedDate\"\n                [value]=\"value\"\n                (valueChange)=\"handleChange(mergeTime($event))\"\n                (click)=\"handleCalendarClick($event)\"\n                (focus)=\"handleFocus()\"\n                (blur)=\"handleBlur()\"\n            >\n                <kendo-calendar-messages [today]=\"localization.get('today')\">\n                </kendo-calendar-messages>\n            </kendo-calendar>\n        <ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return [
        { type: core_1.NgZone, },
        { type: kendo_angular_l10n_1.LocalizationService, },
        { type: core_1.ChangeDetectorRef, },
        { type: kendo_angular_popup_1.PopupService, },
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [touch_enabled_1.TOUCH_ENABLED,] },] },
    ]; };
    DatePickerComponent.propDecorators = {
        'calendar': [{ type: core_1.ViewChild, args: ['calendar',] },],
        'container': [{ type: core_1.ViewChild, args: ['container', { read: core_1.ViewContainerRef },] },],
        'input': [{ type: core_1.ViewChild, args: ['input',] },],
        'popupTemplate': [{ type: core_1.ViewChild, args: ['popupTemplate',] },],
        'wrapper': [{ type: core_1.ViewChild, args: ['wrapper',] },],
        'cellTemplate': [{ type: core_1.ContentChild, args: [cell_template_directive_1.CellTemplateDirective,] },],
        'monthCellTemplate': [{ type: core_1.ContentChild, args: [month_cell_template_directive_1.MonthCellTemplateDirective,] },],
        'yearCellTemplate': [{ type: core_1.ContentChild, args: [year_cell_template_directive_1.YearCellTemplateDirective,] },],
        'decadeCellTemplate': [{ type: core_1.ContentChild, args: [decade_cell_template_directive_1.DecadeCellTemplateDirective,] },],
        'centuryCellTemplate': [{ type: core_1.ContentChild, args: [century_cell_template_directive_1.CenturyCellTemplateDirective,] },],
        'weekNumberTemplate': [{ type: core_1.ContentChild, args: [weeknumber_cell_template_directive_1.WeekNumberCellTemplateDirective,] },],
        'headerTitleTemplate': [{ type: core_1.ContentChild, args: [header_title_template_directive_1.HeaderTitleTemplateDirective,] },],
        'navigationItemTemplate': [{ type: core_1.ContentChild, args: [navigation_item_template_directive_1.NavigationItemTemplateDirective,] },],
        'focusableId': [{ type: core_1.Input },],
        'activeView': [{ type: core_1.Input },],
        'bottomView': [{ type: core_1.Input },],
        'topView': [{ type: core_1.Input },],
        'disabled': [{ type: core_1.Input },],
        'readonly': [{ type: core_1.Input },],
        'popupSettings': [{ type: core_1.Input },],
        'navigation': [{ type: core_1.Input },],
        'min': [{ type: core_1.Input },],
        'max': [{ type: core_1.Input },],
        'focusedDate': [{ type: core_1.Input },],
        'value': [{ type: core_1.Input },],
        'format': [{ type: core_1.Input },],
        'formatPlaceholder': [{ type: core_1.Input },],
        'placeholder': [{ type: core_1.Input },],
        'tabindex': [{ type: core_1.Input },],
        'tabIndex': [{ type: core_1.Input },],
        'title': [{ type: core_1.Input },],
        'rangeValidation': [{ type: core_1.Input },],
        'weekNumber': [{ type: core_1.Input },],
        'valueChange': [{ type: core_1.Output },],
        'onFocus': [{ type: core_1.Output, args: ['focus',] },],
        'onBlur': [{ type: core_1.Output, args: ['blur',] },],
        'open': [{ type: core_1.Output },],
        'close': [{ type: core_1.Output },],
        'wrapperClasses': [{ type: core_1.HostBinding, args: ['class.k-widget',] }, { type: core_1.HostBinding, args: ['class.k-datepicker',] }, { type: core_1.HostBinding, args: ['class.k-header',] },],
        'disabledClass': [{ type: core_1.HostBinding, args: ['class.k-state-disabled',] },],
        'handleKeydown': [{ type: core_1.HostListener, args: ['keydown', ['$event'],] },],
    };
    return DatePickerComponent;
}());
exports.DatePickerComponent = DatePickerComponent;
