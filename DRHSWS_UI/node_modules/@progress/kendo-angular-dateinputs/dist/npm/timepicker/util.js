"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_date_math_1 = require("@progress/kendo-date-math");
var time_part_default_1 = require("./models/time-part.default");
var isEqualTillMinute = function (value, min) { return value.getHours() === min.getHours() && value.getMinutes() === min.getMinutes(); };
var isEqualTillSecond = function (value, min) { return isEqualTillMinute(value, min) && value.getSeconds() === min.getSeconds(); };
var isEqualTillMillisecond = function (value, min) { return isEqualTillSecond(value, min) && value.getMilliseconds() === min.getMilliseconds(); };
var defaultGetters = [
    {
        type: time_part_default_1.TIME_PART.hour,
        getter: function (value) { return value.getHours(); },
        minGetter: function (_, min) { return min.getHours(); }
    }, {
        type: time_part_default_1.TIME_PART.minute,
        getter: function (value) { return value.getMinutes(); },
        minGetter: function (value, min) { return isEqualTillMinute(value, min) ? min.getMinutes() : 0; }
    }, {
        type: time_part_default_1.TIME_PART.second,
        getter: function (value) { return value.getSeconds(); },
        minGetter: function (value, min) { return isEqualTillSecond(value, min) ? min.getSeconds() : 0; }
    }, {
        type: time_part_default_1.TIME_PART.millisecond,
        getter: function (value) { return value.getMilliseconds(); },
        minGetter: function (value, min) { return isEqualTillMillisecond(value, min) ? min.getMilliseconds() : 0; }
    }
];
var left = function (getter) { return function (origin, _) { return getter(origin); }; };
var right = function (getter) { return function (_, candidate) { return getter(candidate); }; };
var convertToObject = function (parts) { return parts.reduce(function (obj, p) { obj[p.type] = p.type; return obj; }, {}); };
var getterByPart = function (parts) { return function (g) { return parts[g.type] ? right(g.getter) : left(g.getter); }; };
var gettersFactory = function (getters) { return function (parts) { return (getters.map(getterByPart(convertToObject(parts)))); }; };
var snapValue = function (getter, minGetter, step) { return function (date, min) {
    var value = getter(date);
    var minValue = minGetter(date, min);
    var rest = value - minValue;
    if (rest < 0) {
        return minValue;
    }
    var mod = rest % step;
    return value - mod + (mod > step / 2 ? step : 0);
}; };
var snappersFactory = function (getters) { return function (steps) { return (getters.map(function (g) {
    var step = steps[g.type];
    return step ? snapValue(g.getter, g.minGetter, step) : g.getter;
})); }; };
/**
 * @hidden
 */
exports.generateGetters = gettersFactory(defaultGetters);
/**
 * @hidden
 */
exports.generateSnappers = snappersFactory(defaultGetters);
/**
 * @hidden
 */
exports.valueMerger = function (getters) { return function (origin, candidate) {
    origin.setHours.apply(origin, getters.map(function (g) { return g(origin, candidate); }));
    return origin;
}; };
/**
 * @hidden
 */
exports.snapTime = function (snappers) { return function (candidate, min) {
    var date = kendo_date_math_1.cloneDate(candidate);
    date.setHours.apply(date, snappers.map(function (s) { return s(date, min); }));
    return date;
}; };
