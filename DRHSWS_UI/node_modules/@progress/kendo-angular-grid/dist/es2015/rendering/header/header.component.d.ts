import { OnDestroy, QueryList, TemplateRef } from '@angular/core';
import { ColumnComponent } from '../../columns/column.component';
import { ColumnBase } from '../../columns/column-base';
import { DetailTemplateDirective } from '../details/detail-template.directive';
import { SortDescriptor } from '@progress/kendo-data-query';
import { SortSettings } from '../../columns/sort-settings';
import { GroupDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { SinglePopupService } from '../../common/single-popup.service';
import { FilterableSettings } from '../../filtering/filterable';
import { IdService } from '../../common/id.service';
import { DropTargetDirective } from '../../dragdrop/drop-target.directive';
import { DraggableColumnDirective } from '../../dragdrop/draggable-column.directive';
import { DragHintService } from '../../dragdrop/drag-hint.service';
import { DropCueService } from '../../dragdrop/drop-cue.service';
import { ColumnReorderService } from '../../dragdrop/column-reorder.service';
import { SortService } from '../../common/sort.service';
/**
 * @hidden
 */
export declare class HeaderComponent implements OnDestroy {
    private popupService;
    private hint;
    private cue;
    private reorderService;
    private idService;
    private sortService;
    /**
     * @hidden
     */
    totalColumnLevels: number;
    columns: Array<ColumnBase>;
    groups: Array<GroupDescriptor>;
    detailTemplate: DetailTemplateDirective;
    scrollable: boolean;
    filterable: FilterableSettings;
    sort: Array<SortDescriptor>;
    filter: CompositeFilterDescriptor;
    sortable: SortSettings;
    groupable: boolean;
    lockedColumnsCount: number;
    resizable: boolean;
    reorderable: boolean;
    columnMenu: boolean;
    columnMenuTemplate: TemplateRef<any>;
    totalColumnsCount: number;
    readonly headerClass: boolean;
    dropTargets: QueryList<DropTargetDirective>;
    readonly unlockedColumnsCount: number;
    private subscription;
    private targetSubscription;
    constructor(popupService: SinglePopupService, hint: DragHintService, cue: DropCueService, reorderService: ColumnReorderService, idService: IdService, sortService: SortService);
    sortColumn(column: ColumnComponent, event: any, link: any): boolean;
    showSortNumbering(column: ColumnComponent): boolean;
    sortOrder(field: string): number;
    sortIcon(field: string): any;
    toggleSort(column: ColumnComponent): Array<SortDescriptor>;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    selectAllCheckboxId(): string;
    isFirstOnRow(column: ColumnComponent, index: number): boolean;
    leafColumnIndex(column: ColumnComponent): number;
    readonly showFilterMenu: boolean;
    readonly showFilterRow: boolean;
    showColumnMenu(column: any): boolean;
    isFilterable(column: ColumnComponent): boolean;
    canDrop(draggable: DraggableColumnDirective, target: DropTargetDirective): boolean;
    shouldActivate(column: ColumnBase): boolean;
    isSortable(column: ColumnComponent): boolean;
    isCheckboxColumn(column: any): boolean;
    protected toggleDirection(field: string, allowUnsort: boolean, initialDirection: "asc" | "desc"): SortDescriptor;
    columnsForLevel(level: number): Array<ColumnBase>;
    isColumnGroupComponent(column: ColumnBase): boolean;
    readonly columnLevels: Array<number>;
    private sortDescriptor(field);
    readonly leafColumns: ColumnBase[];
    private attachTargets();
    private normalizeTarget(e);
    private trackMove(leaveStream, dropStream, e);
    private calculateBefore({draggable, target, mouseEvent, changeContainer});
    private enter({target, before});
    private leave();
    private drop({draggable, target, before});
}
