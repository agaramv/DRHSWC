import { EventEmitter, OnChanges } from '@angular/core';
import { ColumnMenuItemContentTemplateDirective } from './column-menu-item-content-template.directive';
/**
 * Represents an item that can be placed inside a
 * [`ColumnMenuTemplate`]({% slug api_grid_columnmenutemplatedirective %}) directive.
 *
 * @example
 * ```ts-preview
 *
 * _@Component({
 *     selector: 'my-app',
 *     template: `
 *       <kendo-grid [data]="data" [columnMenu]="true" [resizable]="true" #grid>
 *          <ng-template kendoGridColumnMenuTemplate let-service="service" let-column="column">
 *              <kendo-grid-columnmenu-item icon="arrows-resizing" text="Fit column"
 *                  (itemClick)="grid.autoFitColumn(column); service.close()">
 *              </kendo-grid-columnmenu-item>
 *          </ng-template>
 *          <kendo-grid-column field="Field1"></kendo-grid-column>
 *          <kendo-grid-column field="Field2"></kendo-grid-column>
 *       </kendo-grid>
 *     `
 * })
 *
 * class AppComponent {
 *   public data: any[] = [{ Field1: 'Foo', Field2: 'Bar' }];
 * }
 *
 * ```
 */
export declare class ColumnMenuItemComponent implements OnChanges {
    /**
     * Fires when the item is clicked.
     */
    itemClick: EventEmitter<any>;
    /**
     * Fires when the content is expanded.
     */
    expand: EventEmitter<any>;
    /**
     * Fires when the content is collapsed.
     */
    collapse: EventEmitter<any>;
    /**
     * Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons)
     * that will be rendered for the item.
     */
    icon: string;
    /**
     * Specifies the item text.
     */
    text: string;
    /**
     * Specifies if the item is selected.
     */
    selected: boolean;
    /**
     * Specifies if the item is disabled.
     */
    disabled: boolean;
    /**
     * Specifies if the item is expanded.
     */
    expanded: boolean;
    contentTemplate: ColumnMenuItemContentTemplateDirective;
    readonly iconClass: string;
    contentState: string;
    ngOnChanges(changes: any): void;
    /**
     * @hidden
     */
    onClick(e: any): void;
    private updateContentState();
}
