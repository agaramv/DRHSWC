import { InjectionToken } from '@angular/core';
import { merge } from 'rxjs/observable/merge';
import { of } from "rxjs/observable/of";
/**
 * @hidden
 */
export const isPresent = (value) => value !== null && value !== undefined;
/**
 * @hidden
 */
export const isBlank = (value) => value === null || value === undefined;
/**
 * @hidden
 */
export const isArray = (value) => Array.isArray(value);
/**
 * @hidden
 */
export const isTruthy = (value) => !!value;
/**
 * @hidden
 */
export const isNullOrEmptyString = (value) => isBlank(value) || (value.trim && value.trim().length === 0);
/**
 * @hidden
 */
export const isChanged = (propertyName, changes, skipFirstChange = true) => (changes[propertyName] && (!changes[propertyName].isFirstChange() || !skipFirstChange) &&
    changes[propertyName].previousValue !== changes[propertyName].currentValue);
/**
 * @hidden
 */
export const anyChanged = (propertyNames, changes, skipFirstChange = true) => propertyNames.some(name => isChanged(name, changes, skipFirstChange));
/**
 * @hidden
 */
export const observe = (list) => merge(of(list), list.changes);
/**
 * @hidden
 */
export const isUniversal = () => typeof document === 'undefined';
/**
 * @hidden
 */
export const extractFormat = (format) => {
    if (!isNullOrEmptyString(format) && format.startsWith('{0:')) {
        return format.slice(3, format.length - 1);
    }
    return format;
};
/**
 * @hidden
 */
export const not = (fn) => (...args) => !fn.apply(null, args);
/**
 * @hidden
 */
export const or = (...conditions) => (value) => conditions.reduce((acc, x) => acc || x(value), false);
/**
 * @hidden
 */
export const and = (...conditions) => (value) => conditions.reduce((acc, x) => acc && x(value), true);
/**
 * @hidden
 */
export const Skip = new InjectionToken("Skip"); // tslint:disable-line:variable-name
/**
 * @hidden
 */
export const guid = () => {
    let id = "";
    let i;
    let random;
    for (i = 0; i < 32; i++) {
        random = Math.random() * 16 | 0; // tslint:disable-line:no-bitwise
        if (i === 8 || i === 12 || i === 16 || i === 20) {
            id += "-";
        }
        // tslint:disable-next-line:no-bitwise
        id += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random)).toString(16);
    }
    return id;
};
