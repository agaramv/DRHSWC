import { Directive, HostBinding, Input } from '@angular/core';
import { IdService } from '../common/id.service';
import { NavigationService } from './navigation.service';
/**
 * @hidden
 */
export class LogicalRowDirective {
    constructor(idService, navigation) {
        this.idService = idService;
        this.navigation = navigation;
        this.logicalSlaveRow = false;
        this.logicalSlaveCellsCount = 0;
        this.dataRowIndex = -1;
    }
    get hostRole() {
        return this.logicalSlaveRow ? 'presentation' : 'row';
    }
    get ariaRowIndex() {
        return this.logicalRowIndex + 1;
    }
    get ariaOwns() {
        if (this.logicalSlaveRow || this.logicalSlaveCellsCount === 0) {
            return undefined;
        }
        const ids = [];
        const total = this.logicalCellsCount + this.logicalSlaveCellsCount;
        for (let cellIndex = this.logicalCellsCount; cellIndex < total; cellIndex++) {
            ids.push(this.idService.cellId(this.logicalRowIndex, cellIndex));
        }
        return ids.join(' ');
    }
    ngOnChanges() {
        if (this.navigation.enabled) {
            this.register();
        }
    }
    ngOnDestroy() {
        if (!this.logicalSlaveRow) {
            this.navigation.unregisterRow(this);
        }
    }
    register() {
        if (!this.logicalSlaveRow) {
            this.navigation.registerRow(this);
        }
    }
}
LogicalRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[kendoGridLogicalRow]'
            },] },
];
/** @nocollapse */
LogicalRowDirective.ctorParameters = () => [
    { type: IdService, },
    { type: NavigationService, },
];
LogicalRowDirective.propDecorators = {
    'logicalRowIndex': [{ type: Input },],
    'logicalSlaveRow': [{ type: Input },],
    'logicalCellsCount': [{ type: Input },],
    'logicalSlaveCellsCount': [{ type: Input },],
    'dataRowIndex': [{ type: Input },],
    'dataItem': [{ type: Input },],
    'hostRole': [{ type: HostBinding, args: ['attr.role',] },],
    'ariaRowIndex': [{ type: HostBinding, args: ['attr.aria-rowindex',] },],
    'ariaOwns': [{ type: HostBinding, args: ['attr.aria-owns',] },],
};
