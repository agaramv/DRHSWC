const findByIndex = (arr, index) => arr.find(item => item.index === index);
const indexComparer = (a, b) => a.index - b.index;
const expandColSpan = (cell, row) => {
    if (cell.colSpan > 1) {
        cell.parent = cell;
        for (let i = cell.colIndex + 1; i < cell.colIndex + cell.colSpan; i++) {
            row.cells[i] = {
                colIndex: i,
                parent: cell,
                rowIndex: cell.rowIndex,
                dataItem: cell.dataItem,
                dataRowIndex: cell.dataRowIndex
            };
        }
    }
};
const expandRowSpan = (row, prevRow) => prevRow.cells
    .filter(cell => cell.rowSpan && cell.rowSpan + prevRow.index > row.index)
    .forEach(cell => {
    const colIndex = cell.colIndex;
    row.cells[colIndex] = {
        colIndex: colIndex,
        parent: cell,
        rowIndex: row.index,
        dataItem: cell.dataItem,
        dataRowIndex: cell.dataRowIndex
    };
});
const expandAllRowSpans = (row, allRows) => allRows
    .filter(r => r.index < row.index)
    .forEach(prevRow => expandRowSpan(row, prevRow));
/**
 * @hidden
 *
 * Contains information for the currently rendered rows and cells.
 */
export class NavigationModel {
    constructor() {
        this.rows = [];
    }
    get firstRow() {
        return this.rows[0];
    }
    get lastRow() {
        return this.rows[this.rows.length - 1];
    }
    registerCell(cell) {
        const row = findByIndex(this.rows, cell.logicalRowIndex);
        if (!row) {
            return;
        }
        const colIndex = cell.logicalColIndex;
        const modelCell = {
            colIndex,
            rowIndex: row.index,
            colSpan: cell.colSpan,
            rowSpan: cell.rowSpan,
            dataItem: row.dataItem,
            dataRowIndex: row.dataRowIndex,
            focusGroup: cell.focusGroup
        };
        row.cells[colIndex] = modelCell;
        if (cell.groupItem) {
            row.groupItem = cell.groupItem;
        }
        expandColSpan(modelCell, row);
    }
    registerRow(row) {
        this.unregisterRow(row);
        const modelRow = {
            index: row.logicalRowIndex,
            dataItem: row.dataItem,
            dataRowIndex: row.dataRowIndex,
            cells: []
        };
        expandAllRowSpans(modelRow, this.rows);
        this.rows.push(modelRow);
        this.rows.sort(indexComparer);
    }
    unregisterRow(row) {
        this.rows = this.rows.filter(r => r.index !== row.logicalRowIndex);
    }
    findRowByIndex(index) {
        return findByIndex(this.rows, index);
    }
    findRowByPosition(pos) {
        const maxPos = this.rows.length - 1;
        const normalizedPos = Math.max(0, Math.min(pos, maxPos));
        return this.rows[normalizedPos];
    }
    rowPosition(row) {
        return this.rows.indexOf(row);
    }
}
