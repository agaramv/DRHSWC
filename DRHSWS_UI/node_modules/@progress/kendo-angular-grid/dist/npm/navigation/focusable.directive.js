"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var cell_context_1 = require("../rendering/common/cell-context");
var dom_queries_1 = require("../rendering/common/dom-queries");
var isButton = dom_queries_1.matchesNodeName('button');
var isInputTag = dom_queries_1.matchesNodeName('input');
var navigableRegex = /(button|checkbox|color|file|radio|reset|submit)/i;
var isNavigableInput = function (element) { return isInputTag(element) && navigableRegex.test(element.type); };
var isNavigable = function (element) { return !element.disabled && (isButton(element) || isNavigableInput(element)); };
/**
 * A directive that controls the way focusable elements receive
 * [focus in a navigable Grid]({% slug keyboard_navigation_grid %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *      <input type="text" placeholder="Tab stop #0" />
 *      <kendo-grid [data]="data" [navigable]="true">
 *          <kendo-grid-column field="ProductID" title="Product ID" width="40">
 *          </kendo-grid-column>
 *          <kendo-grid-column field="ProductName" title="Product Name" width="100">
 *          </kendo-grid-column>
 *          <kendo-grid-column>
 *              <ng-template kendoGridCellTemplate let-dataItem>
 *                  <!-- The first focusable element will be focused when pressing Enter on the cell -->
 *                  <input type="text" kendoGridFocusable [value]="dataItem.ProductName" />
 *                  <input type="button" kendoGridFocusable value="Update" />
 *              </ng-template>
 *          </kendo-grid-column>
 *          <kendo-grid-column width="80">
 *              <ng-template kendoGridCellTemplate>
 *                  <!-- A single focusable element will be focused during navigation -->
 *                  <input type="button" kendoGridFocusable value="Delete" />
 *              </ng-template>
 *          </kendo-grid-column>
 *      </kendo-grid>
 *      <input type="text" placeholder="Tab stop #2" />
 *    `
 * })
 *
 * class AppComponent {
 *     public readonly data: any = [{
 *         "ProductID": 1,
 *         "ProductName": "Chai",
 *         "UnitPrice": 18.0000,
 *         "Discontinued": true
 *     }, {
 *         "ProductID": 2,
 *         "ProductName": "Chang",
 *         "UnitPrice": 19.0000,
 *         "Discontinued": false
 *     }];
 * }
 * ```
 */
var FocusableDirective = /** @class */ (function () {
    function FocusableDirective(cellContext, hostElement, renderer) {
        this.cellContext = cellContext;
        this.hostElement = hostElement;
        this.renderer = renderer;
        this.active = true;
        if (this.cellContext) {
            this.group = this.cellContext.focusGroup;
        }
        if (this.group) {
            this.group.registerElement(this);
        }
    }
    Object.defineProperty(FocusableDirective.prototype, "enabled", {
        get: function () {
            return this.element && !this.element.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FocusableDirective.prototype, "tabIndex", {
        get: function () {
            return this.active ? '0' : '-1';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FocusableDirective.prototype, "visible", {
        get: function () {
            return this.element && dom_queries_1.isVisible(this.element);
        },
        enumerable: true,
        configurable: true
    });
    FocusableDirective.prototype.ngAfterViewInit = function () {
        this.element = dom_queries_1.findFocusable(this.hostElement.nativeElement, false) || this.hostElement.nativeElement;
        this.updateState();
    };
    FocusableDirective.prototype.ngOnDestroy = function () {
        if (this.group) {
            this.group.unregisterElement(this);
        }
    };
    /**
     * @hidden
     */
    FocusableDirective.prototype.updateState = function () {
        if (!this.group) {
            return;
        }
        var isActive = this.group.isActive;
        if (this.element && isActive !== this.active) {
            this.active = isActive;
            this.renderer.setAttribute(this.element, 'tabIndex', this.tabIndex);
        }
    };
    /**
     * @hidden
     */
    FocusableDirective.prototype.canFocus = function () {
        return this.visible && this.enabled;
    };
    /**
     * @hidden
     */
    FocusableDirective.prototype.isNavigable = function () {
        return this.canFocus() && isNavigable(this.element);
    };
    /**
     * @hidden
     */
    FocusableDirective.prototype.focus = function () {
        if (this.element) {
            this.element.focus();
        }
    };
    /**
     * @hidden
     */
    FocusableDirective.prototype.hasFocus = function () {
        var el = this.hostElement.nativeElement;
        return document.activeElement !== el && dom_queries_1.closest(document.activeElement, function (e) { return e === el; });
    };
    FocusableDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[kendoGridFocusable]' + ",\n        [kendoGridEditCommand],\n        [kendoGridRemoveCommand],\n        [kendoGridSaveCommand],\n        [kendoGridCancelCommand],\n        [kendoGridSelectionCheckbox]\n    "
                },] },
    ];
    /** @nocollapse */
    FocusableDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [cell_context_1.CELL_CONTEXT,] },] },
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
    ]; };
    return FocusableDirective;
}());
exports.FocusableDirective = FocusableDirective;
