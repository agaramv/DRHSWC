"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var id_service_1 = require("../common/id.service");
var navigation_service_1 = require("./navigation.service");
/**
 * @hidden
 */
var LogicalRowDirective = /** @class */ (function () {
    function LogicalRowDirective(idService, navigation) {
        this.idService = idService;
        this.navigation = navigation;
        this.logicalSlaveRow = false;
        this.logicalSlaveCellsCount = 0;
        this.dataRowIndex = -1;
    }
    Object.defineProperty(LogicalRowDirective.prototype, "hostRole", {
        get: function () {
            return this.logicalSlaveRow ? 'presentation' : 'row';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogicalRowDirective.prototype, "ariaRowIndex", {
        get: function () {
            return this.logicalRowIndex + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogicalRowDirective.prototype, "ariaOwns", {
        get: function () {
            if (this.logicalSlaveRow || this.logicalSlaveCellsCount === 0) {
                return undefined;
            }
            var ids = [];
            var total = this.logicalCellsCount + this.logicalSlaveCellsCount;
            for (var cellIndex = this.logicalCellsCount; cellIndex < total; cellIndex++) {
                ids.push(this.idService.cellId(this.logicalRowIndex, cellIndex));
            }
            return ids.join(' ');
        },
        enumerable: true,
        configurable: true
    });
    LogicalRowDirective.prototype.ngOnChanges = function () {
        if (this.navigation.enabled) {
            this.register();
        }
    };
    LogicalRowDirective.prototype.ngOnDestroy = function () {
        if (!this.logicalSlaveRow) {
            this.navigation.unregisterRow(this);
        }
    };
    LogicalRowDirective.prototype.register = function () {
        if (!this.logicalSlaveRow) {
            this.navigation.registerRow(this);
        }
    };
    LogicalRowDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[kendoGridLogicalRow]'
                },] },
    ];
    /** @nocollapse */
    LogicalRowDirective.ctorParameters = function () { return [
        { type: id_service_1.IdService, },
        { type: navigation_service_1.NavigationService, },
    ]; };
    LogicalRowDirective.propDecorators = {
        'logicalRowIndex': [{ type: core_1.Input },],
        'logicalSlaveRow': [{ type: core_1.Input },],
        'logicalCellsCount': [{ type: core_1.Input },],
        'logicalSlaveCellsCount': [{ type: core_1.Input },],
        'dataRowIndex': [{ type: core_1.Input },],
        'dataItem': [{ type: core_1.Input },],
        'hostRole': [{ type: core_1.HostBinding, args: ['attr.role',] },],
        'ariaRowIndex': [{ type: core_1.HostBinding, args: ['attr.aria-rowindex',] },],
        'ariaOwns': [{ type: core_1.HostBinding, args: ['attr.aria-owns',] },],
    };
    return LogicalRowDirective;
}());
exports.LogicalRowDirective = LogicalRowDirective;
