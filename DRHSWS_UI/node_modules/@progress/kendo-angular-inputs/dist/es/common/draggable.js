import { EventEmitter, ElementRef, Directive, Output } from '@angular/core';
import { isDocumentAvailable } from './dom-utils';
import Draggable from '@telerik/kendo-draggable';
/**
 * @hidden
 */
var KendoDraggableDirective = /** @class */ (function () {
    function KendoDraggableDirective(ngEl) {
        var _this = this;
        this.kendoDrag = new EventEmitter();
        this.kendoPress = new EventEmitter();
        this.kendoRelease = new EventEmitter();
        if (!isDocumentAvailable()) {
            return;
        }
        this.draggable = new Draggable({
            drag: function (e) {
                if (e.hasOwnProperty("originalEvent")) {
                    e.originalEvent.preventDefault();
                }
                _this.kendoDrag.next(e);
            },
            press: function (e) { return _this.kendoPress.next(e); },
            release: function (e) { return _this.kendoRelease.next(e); }
        });
        this.draggable.bindTo(ngEl.nativeElement);
    }
    KendoDraggableDirective.prototype.ngOnDestroy = function () {
        if (this.draggable) {
            this.draggable.destroy();
        }
    };
    KendoDraggableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[kendoDraggable]'
                },] },
    ];
    /** @nocollapse */
    KendoDraggableDirective.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    KendoDraggableDirective.propDecorators = {
        'kendoDrag': [{ type: Output },],
        'kendoPress': [{ type: Output },],
        'kendoRelease': [{ type: Output },],
    };
    return KendoDraggableDirective;
}());
export { KendoDraggableDirective };
