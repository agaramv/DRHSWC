import { ElementRef, Renderer2, Component, EventEmitter, HostBinding, Input, Output, ViewChild, forwardRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';
import { Keys } from '../common/enums';
import { isChanged } from '../common/changes';
import { SwitchController } from '@telerik/kendo-inputs-common';
import { guid, isDocumentAvailable } from '../common/dom-utils';
import { skip } from "rxjs/operators/skip";
import Draggable from '@telerik/kendo-draggable';
/**
 * Represents the Kendo UI Switch component for Angular ([see example]({ slug overview_switch %})).
 */
export class SwitchComponent {
    constructor(renderer, hostElement, localizationService, changeDetector, ngZone) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.localizationService = localizationService;
        this.changeDetector = changeDetector;
        this.ngZone = ngZone;
        /**
         * @hidden
         */
        this.focusableId = `k-${guid()}`;
        /**
         * Sets the current value of the Switch when it is initially displayed.
         */
        this.checked = false;
        /**
         * Determines whether the component is disabled.
         */
        this.disabled = false;
        /**
         * Determines whether the Switch is in its read-only state.
         */
        this.readonly = false;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Fires each time the user focuses the `input` element.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the `input` element gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the user selects a new value.
         */
        this.valueChange = new EventEmitter();
        this.ngChange = (_) => { };
        this.ngTouched = () => { };
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
        this.controller = new SwitchController(this.updateView.bind(this), this.changeValue.bind(this));
        this.keyDownHandler = this.keyDownHandler.bind(this);
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    get ariaDisabled() {
        return this.disabled ? true : undefined;
    }
    get ariaReadonly() {
        return this.readonly ? true : undefined;
    }
    get ariaChecked() {
        return this.checked ? true : undefined;
    }
    get hostClasses() {
        return true;
    }
    get switchOnClass() {
        return this.checked;
    }
    get switchOffClass() {
        return !this.checked;
    }
    get disabledClass() {
        return this.disabled;
    }
    get focusedClass() {
        return this.focused;
    }
    /**
     * @hidden
     */
    get onLabelMessage() {
        return this.onLabel || this.localizationService.get('on');
    }
    /**
     * @hidden
     */
    get offLabelMessage() {
        return this.offLabel || this.localizationService.get('off');
    }
    get isEnabled() {
        return !this.disabled && !this.readonly;
    }
    ngOnInit() {
        if (this.hostElement) {
            const wrapper = this.hostElement.nativeElement;
            this.renderer.removeAttribute(wrapper, "tabindex");
            this.draggable = new Draggable({
                drag: this.onHandleDrag.bind(this),
                press: this.onHandlePress.bind(this),
                release: this.onHandleRelease.bind(this)
            });
            this.ngZone.runOutsideAngular(() => {
                this.draggable.bindTo(wrapper);
            });
        }
        this.localizationChangeSubscription = this.localizationService
            .changes
            .pipe(skip(1))
            .subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
            this.updateState();
        });
    }
    ngOnChanges(changes) {
        if (isChanged('checked', changes)) {
            this.updateState();
        }
    }
    ngOnDestroy() {
        if (this.draggable) {
            this.draggable.destroy();
        }
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
    }
    /**
     * Focuses the Switch component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="switch.focus()">Focus</button>
     *  <kendo-switch #switch></kendo-switch>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    focus() {
        if (!this.wrapper) {
            return;
        }
        this.wrapper.nativeElement.focus();
    }
    /**
     * Blurs the Switch component.
     */
    blur() {
        if (!this.wrapper) {
            return;
        }
        this.wrapper.nativeElement.blur();
    }
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.changeDetector.markForCheck();
    }
    /**
     * @hidden
     */
    onResize() {
        this.updateState();
    }
    /**
     * @hidden
     */
    handleFocus() {
        this.focused = true;
        this.onFocus.emit();
    }
    /**
     * @hidden
     */
    handleBlur() {
        this.focused = false;
        this.ngTouched();
        this.onBlur.emit();
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            Promise.resolve().then(() => this.updateState());
        });
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.checked = value === null ? false : value;
        this.updateState();
        this.changeDetector.markForCheck();
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.ngChange = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.ngTouched = fn;
    }
    /**
     * @hidden
     */
    keyDownHandler(e) {
        const keyCode = e.keyCode;
        if (this.isEnabled && (keyCode === Keys.space || keyCode === Keys.enter)) {
            this.controller.change(!this.checked);
            e.preventDefault();
        }
    }
    updateState() {
        if (!isDocumentAvailable()) {
            return;
        }
        const handleElement = this.dragHandle.nativeElement;
        const handleStyles = getComputedStyle(handleElement);
        const handleMargin = (parseInt(handleStyles.marginLeft, 10) + parseInt(handleStyles.borderLeftWidth, 10)) * 2;
        const wrapper = this.hostElement.nativeElement;
        const wrapperOffset = wrapper.offsetWidth;
        const rect = wrapper.getBoundingClientRect();
        if (wrapperOffset === 0) {
            return;
        }
        this.controller.updateState({
            animate: false,
            checked: this.checked,
            coords: {
                left: rect.left,
                right: rect.right
            },
            handleMargin: handleMargin,
            handleOffset: handleElement.offsetWidth,
            reverse: this.localizationService.rtl,
            wrapperOffset: wrapperOffset
        });
    }
    changeValue(value) {
        if (this.checked !== value) {
            this.ngZone.run(() => {
                this.checked = value;
                this.ngChange(value);
                this.valueChange.emit(value);
                this.changeDetector.markForCheck();
            });
        }
    }
    onHandleDrag(e) {
        e.originalEvent.preventDefault();
        this.ifEnabled(this.controller.onDrag, e);
    }
    onHandlePress(e) {
        this.ifEnabled(this.controller.onPress, e);
    }
    onHandleRelease(e) {
        this.ifEnabled(this.controller.onRelease, e);
    }
    ifEnabled(callback, e) {
        if (this.isEnabled) {
            callback(e);
        }
    }
    applyStyle(props) {
        Object.keys(props).forEach((x) => {
            this.dragHandle.nativeElement.style[x] = props[x];
        });
    }
    updateView(elements) {
        if (isDocumentAvailable()) {
            this.applyStyle(this.controller.addAnimation(elements.handle));
        }
    }
}
SwitchComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoSwitch',
                providers: [
                    LocalizationService,
                    { provide: L10N_PREFIX, useValue: 'kendo.switch' },
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => SwitchComponent) /* tslint:disable-line */
                    }
                ],
                selector: 'kendo-switch',
                template: `
        <ng-container kendoSwitchLocalizedMessages
            i18n-on="kendo.switch.on|The **On** label of the Switch."
            on="ON"
            i18n-off="kendo.switch.off|The **Off** label of the Switch."
            off="OFF"
        >

        <span
            #wrapper
            class="k-switch-container"
            [id]="focusableId"
            [attr.tabindex]="(disabled ? undefined : tabIndex)"
            (focus)="handleFocus()"
            (blur)="handleBlur()"
            [kendoEventsOutsideAngular]="{ keydown: keyDownHandler }"
        >
            <span #dragHandle class="k-switch-handle">
                <span class="k-switch-label-on">{{onLabelMessage}}</span>
                <span class="k-switch-label-off">{{offLabelMessage}}</span>
            </span>
        </span>
        <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>
  `
            },] },
];
/** @nocollapse */
SwitchComponent.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: LocalizationService, },
    { type: ChangeDetectorRef, },
    { type: NgZone, },
];
SwitchComponent.propDecorators = {
    'focusableId': [{ type: Input },],
    'onLabel': [{ type: Input },],
    'offLabel': [{ type: Input },],
    'checked': [{ type: Input },],
    'disabled': [{ type: Input },],
    'readonly': [{ type: Input },],
    'tabindex': [{ type: Input },],
    'tabIndex': [{ type: Input },],
    'onFocus': [{ type: Output, args: ['focus',] },],
    'onBlur': [{ type: Output, args: ['blur',] },],
    'valueChange': [{ type: Output },],
    'dragHandle': [{ type: ViewChild, args: ['dragHandle',] },],
    'wrapper': [{ type: ViewChild, args: ['wrapper',] },],
    'direction': [{ type: HostBinding, args: ['attr.dir',] },],
    'ariaDisabled': [{ type: HostBinding, args: ['attr.aria-disabled',] },],
    'ariaReadonly': [{ type: HostBinding, args: ['attr.aria-readonly',] },],
    'ariaChecked': [{ type: HostBinding, args: ['attr.aria-checked',] },],
    'hostClasses': [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-switch',] },],
    'switchOnClass': [{ type: HostBinding, args: ['class.k-switch-on',] },],
    'switchOffClass': [{ type: HostBinding, args: ['class.k-switch-off',] },],
    'disabledClass': [{ type: HostBinding, args: ['class.k-state-disabled',] },],
    'focusedClass': [{ type: HostBinding, args: ['class.k-state-focused',] },],
};
