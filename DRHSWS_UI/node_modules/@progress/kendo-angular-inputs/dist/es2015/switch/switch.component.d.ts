import { AfterViewInit, ElementRef, Renderer2, EventEmitter, OnInit, OnDestroy, OnChanges, ChangeDetectorRef, SimpleChanges, NgZone } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { SwitchController } from '@telerik/kendo-inputs-common';
import { Subscription } from "rxjs/Subscription";
/**
 * Represents the Kendo UI Switch component for Angular ([see example]({ slug overview_switch %})).
 */
export declare class SwitchComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnChanges, OnDestroy {
    private renderer;
    private hostElement;
    private localizationService;
    private changeDetector;
    private ngZone;
    /**
     * @hidden
     */
    focusableId: string;
    /**
     * Changes the **On** label so that it can be localized.
     */
    onLabel: string;
    /**
     * Changes the **Off** label so that it can be localized.
     */
    offLabel: string;
    /**
     * Sets the current value of the Switch when it is initially displayed.
     */
    checked: boolean;
    /**
     * Determines whether the component is disabled.
     */
    disabled: boolean;
    /**
     * Determines whether the Switch is in its read-only state.
     */
    readonly: boolean;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabindex: number;
    /**
     * @hidden
     */
    tabIndex: number;
    /**
     * Fires each time the user focuses the `input` element.
     */
    onFocus: EventEmitter<any>;
    /**
     * Fires each time the `input` element gets blurred.
     */
    onBlur: EventEmitter<any>;
    /**
     * Fires each time the user selects a new value.
     */
    valueChange: EventEmitter<any>;
    dragHandle: any;
    wrapper: any;
    direction: string;
    readonly ariaDisabled: boolean;
    readonly ariaReadonly: boolean;
    readonly ariaChecked: boolean;
    readonly hostClasses: boolean;
    readonly switchOnClass: boolean;
    readonly switchOffClass: boolean;
    readonly disabledClass: boolean;
    readonly focusedClass: boolean;
    /**
     * @hidden
     */
    readonly onLabelMessage: string;
    /**
     * @hidden
     */
    readonly offLabelMessage: string;
    /**
     * @hidden
     */
    focused: boolean;
    protected ngChange: Function;
    protected ngTouched: Function;
    protected readonly isEnabled: boolean;
    protected localizationChangeSubscription: Subscription;
    protected controller: SwitchController;
    protected draggable: any;
    constructor(renderer: Renderer2, hostElement: ElementRef, localizationService: LocalizationService, changeDetector: ChangeDetectorRef, ngZone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * Focuses the Switch component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="switch.focus()">Focus</button>
     *  <kendo-switch #switch></kendo-switch>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    focus(): void;
    /**
     * Blurs the Switch component.
     */
    blur(): void;
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     */
    onResize(): void;
    /**
     * @hidden
     */
    handleFocus(): void;
    /**
     * @hidden
     */
    handleBlur(): void;
    /**
     * @hidden
     */
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    writeValue(value: boolean): void;
    /**
     * @hidden
     */
    registerOnChange(fn: () => any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: () => any): void;
    /**
     * @hidden
     */
    keyDownHandler(e: any): void;
    private updateState();
    private changeValue(value);
    private onHandleDrag(e);
    private onHandlePress(e);
    private onHandleRelease(e);
    private ifEnabled(callback, e);
    private applyStyle(props);
    private updateView(elements);
}
