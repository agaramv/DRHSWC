import { Directive, ElementRef, EventEmitter, HostBinding, Output, Renderer2, Optional, Inject, Input, NgZone } from '@angular/core';
import { NgControl } from '@angular/forms';
import { RTL } from '@progress/kendo-angular-l10n';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { filter } from 'rxjs/operators/filter';
/**
 * Represents the Kendo UI TextArea directive for the Inputs components for Angular.
 * Used to add a floating label to any `textarea` element.
 *
 * @example
 * ```ts-no-run
 * <textarea kendoTextArea></textarea>
 * ```
 */
export class TextAreaDirective {
    constructor(renderer, element, zone, control, rtl) {
        this.renderer = renderer;
        this.element = element;
        this.zone = zone;
        this.control = control;
        /**
         * Specifies if the `textarea` element will resize its height automatically.
         *
         * @default false
         */
        this.autoSize = false;
        /**
         * Fires each time the user focuses the `textarea` element.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the `textarea` element gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        this.listeners = [];
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    get elementClass() {
        return true;
    }
    /**
     * @hidden
     */
    set value(text) {
        if (this.element) {
            this.element.nativeElement.value = text;
        }
    }
    /**
     * Gets the value of the `textarea` element.
     */
    get value() {
        return this.element.nativeElement.value;
    }
    get id() {
        return this.element.nativeElement.id;
    }
    set id(id) {
        this.renderer.setAttribute(this.element.nativeElement, 'id', id);
    }
    ngOnChanges(changes) {
        const element = this.element.nativeElement;
        if (changes.autoSize) {
            if (this.autoSize) {
                this.initialHeight = element.offsetHeight;
                this.renderer.setStyle(element, 'resize', 'none');
            }
            else {
                this.renderer.setStyle(element, 'overflow-y', 'auto');
                this.renderer.setStyle(element, 'resize', 'both');
                element.style.height = `${this.initialHeight}px`;
            }
        }
        if (this.autoSize) {
            this.resize();
        }
    }
    ngOnInit() {
        const element = this.element.nativeElement;
        this.listeners = [
            this.renderer.listen(element, 'focus', () => this.onFocus.emit()),
            this.renderer.listen(element, 'blur', () => this.onBlur.emit())
        ];
        this.zone.runOutsideAngular(() => {
            this.inputSubscription = fromEvent(element, 'input')
                .pipe(filter(() => this.autoSize))
                .subscribe(() => this.resize());
        });
        if (this.control) {
            this.valueChangeSubscription = this.control.valueChanges
                .pipe(filter(() => this.autoSize))
                .subscribe(() => this.resize());
        }
    }
    ngOnDestroy() {
        this.listeners.forEach(listener => listener());
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
    }
    resize() {
        const element = this.element.nativeElement;
        this.renderer.setStyle(element, 'overflow-y', 'hidden');
        element.style.height = `${this.initialHeight}px`;
        const scrollHeight = element.scrollHeight;
        if (scrollHeight > this.initialHeight) {
            element.style.height = `${scrollHeight}px`;
        }
    }
}
TextAreaDirective.decorators = [
    { type: Directive, args: [{
                selector: 'textarea[kendoTextArea]'
            },] },
];
/** @nocollapse */
TextAreaDirective.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: NgZone, },
    { type: NgControl, decorators: [{ type: Optional },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] },] },
];
TextAreaDirective.propDecorators = {
    'elementClass': [{ type: HostBinding, args: ['class.k-textarea',] },],
    'direction': [{ type: HostBinding, args: ['attr.dir',] },],
    'autoSize': [{ type: Input },],
    'value': [{ type: Input },],
    'onFocus': [{ type: Output, args: ['focus',] },],
    'onBlur': [{ type: Output, args: ['blur',] },],
};
