import { AfterViewInit, Renderer2, ElementRef, EventEmitter, OnChanges, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { LabelTemplateDirective } from './label-template.directive';
/**
 * Represents the Kendo UI Slider component for Angular ([see example]({ slug overview_slider %})).
 */
export declare class SliderComponent implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy {
    private localizationService;
    private renderer;
    private hostElement;
    /**
     * @hidden
     */
    focusableId: string;
    /**
     * Sets the title of the **Increase** button of the Slider.
     */
    incrementTitle: string;
    /**
     * Sets the title of the **Decrease** button of the Slider.
     */
    decrementTitle: string;
    /**
     * Makes the arrow side buttons of the Slider appear. When `showButtons` is set to `false`, the buttons are not displayed.
     */
    showButtons: boolean;
    /**
     * Denotes the location of the tick marks in the Slider.
     *
     * The available options are:
     * * `before`&mdash;Tick marks are located to the top side of the horizontal track or to the left side of a vertical track.
     * * `after`&mdash;Tick marks are located to the bottom side of the horizontal track or to the right side of the vertical track.
     * * `both`&mdash;Tick marks are located on both sides of the track.
     * * `none`&mdash;Tick marks are not visible. The actual elements are not added to the DOM tree.
     */
    tickPlacement: string;
    /**
     * Defines the title of the ticks. The default title for each tick is its Slider value.
     * If you use a callback function, the function accepts an argument that holds the value of
     * the component and returns a string with the new title.
     */
    title: (value: number) => string;
    /**
     * Changes the title attribute of the drag handle so that it can be localized.
     */
    dragHandleTitle: string;
    /**
     * If `vertical` is set to `true`, it changes the orientation of the Slider from horizontal to vertical.
     */
    vertical: boolean;
    /**
     * The minimum value of the Slider. The attribute accepts both integers and floating-point numbers.
     */
    min: number;
    /**
     * The maximum value of the Slider. The attribute accepts both integers and floating-point numbers.
     */
    max: number;
    /**
     * The step value of the Slider. Accepts positive values only.
     * Can be both integer or a floating-point number.
     */
    smallStep: number;
    /**
     * Specifies that every n<sup>th</sup> tick will be large and will have a label.
     * Accepts positive integer values only.
     */
    largeStep: number;
    /**
     * Sets the width between each two ticks along the track. The value has to be set in pixels.
     * If no `fixedTickWidth` is provided, the component automatically adjusts the tick width to
     * accommodate the elements within the size of the component.
     */
    fixedTickWidth: number;
    /**
     * Determines whether the component is disabled.
     */
    disabled: boolean;
    /**
     * Determines whether the Slider is in its read-only state.
     */
    readonly: boolean;
    /**
     * The current value of the Slider when it is initially displayed.
     * The component can use either NgModel or the `value` binging, but not both of them at the same time.
     */
    value: number;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabindex: number;
    /**
     * @hidden
     */
    tabIndex: number;
    /**
     * Fires each time the user focuses the `input` element.
     */
    onFocus: EventEmitter<any>;
    /**
     * Fires each time the `input` element gets blurred.
     */
    onBlur: EventEmitter<any>;
    /**
     * Fires each time the user selects a new value.
     */
    valueChange: EventEmitter<any>;
    wrapper: ElementRef;
    track: ElementRef;
    draghandle: ElementRef;
    sliderSelection: ElementRef;
    ticksContainer: ElementRef;
    ticks: any;
    decreaseButton: ElementRef;
    increaseButton: ElementRef;
    labelTemplate: LabelTemplateDirective;
    direction: string;
    readonly horizontalClass: boolean;
    readonly verticalClass: boolean;
    readonly sliderClass: boolean;
    readonly transitionsClass: boolean;
    readonly widgetClass: boolean;
    readonly stateDefaultClass: boolean;
    readonly disabledClass: boolean;
    readonly focusedClass: boolean;
    readonly ariaDisabled: boolean;
    readonly ariaReadonly: boolean;
    readonly ariaMin: number;
    readonly ariaMax: number;
    readonly ariaValue: number;
    dragging: boolean;
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     *
     * @param isDisabled
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     */
    handleFocus(): void;
    /**
     * @hidden
     */
    handleBlur(): void;
    /**
     * @hidden
     */
    keydown(event: any): void;
    constructor(localizationService: LocalizationService, renderer: Renderer2, hostElement: ElementRef);
    ngOnInit(): void;
    /**
     * Focuses the Slider component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="slider.focus()">Focus</button>
     *  <kendo-slider #slider></kendo-slider>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    focus(): void;
    /**
     * Blurs the Slider component.
     */
    blur(): void;
    ngOnChanges(changes: any): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    readonly incrementMessage: string;
    /**
     * @hidden
     */
    readonly decrementMessage: string;
    /**
     * @hidden
     */
    readonly dragHandleMessage: string;
    /**
     * @hidden
     */
    onWrapClick(args: any): void;
    /**
     * @hidden
     */
    ifEnabled: Function;
    /**
     * @hidden
     */
    handleDragPress(args: any): void;
    /**
     * @hidden
     */
    onHandleDrag(args: any): void;
    /**
     * @hidden
     */
    onKeyDown(e: KeyboardEvent): void;
    /**
     * @hidden
     */
    onHandleRelease(): void;
    /**
     * @hidden
     */
    writeValue(value: number): void;
    /**
     * @hidden
     */
    registerOnChange(fn: () => any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: () => any): void;
    /**
     * @hidden
     */
    changeValue(value: number): void;
    /**
     * @hidden
     */
    sizeComponent(animate: boolean): void;
    private decreaseButtonSubscription;
    private increaseButtonSubscription;
    private focused;
    private localizationChangeSubscription;
    private readonly reverse;
    private readonly keyBinding;
    private setValueChangeInterval(element, callback);
    private ngChange;
    private ngTouched;
    private decreaseValue;
    private increaseValue;
    private handleAnimation(animate);
    private getProps();
}
