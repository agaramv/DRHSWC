"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var textbox_directive_1 = require("./textbox.directive");
var textarea_directive_1 = require("./textarea.directive");
var forms_1 = require("@angular/forms");
var dom_utils_1 = require("../common/dom-utils");
var isFunction = function (x) { return Object.prototype.toString.call(x) === '[object Function]'; };
/**
 * Represents the Kendo UI TextBoxContainer component for Angular.
 * Provides floating labels to `input` elements.
 *
 * @example
 * ```ts
 *
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *     <kendo-textbox-container floatingLabel="First name">
 *       <input kendoTextBox />
 *     </kendo-textbox-container>
 *   `
 * })
 * class AppComponent {
 * }
 *
 * ```
 */
var TextBoxContainerComponent = /** @class */ (function () {
    function TextBoxContainerComponent(elementRef, renderer, changeDetectorRef, rtl) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        /**
         * @hidden
         */
        this.focused = false;
        /**
         * @hidden
         */
        this.empty = true;
        /**
         * @hidden
         */
        this.invalid = false;
        this._subscriptions = [];
        this.direction = rtl ? 'rtl' : 'ltr';
        this.renderer.removeAttribute(this.elementRef.nativeElement, "id");
    }
    Object.defineProperty(TextBoxContainerComponent.prototype, "hostClasses", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxContainerComponent.prototype, "textareaElementClass", {
        get: function () {
            return !!this.textarea;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxContainerComponent.prototype, "focusedClass", {
        get: function () {
            return this.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxContainerComponent.prototype, "emptyClass", {
        get: function () {
            return this.empty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxContainerComponent.prototype, "invalidClass", {
        get: function () {
            return this.invalid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    TextBoxContainerComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!this.formControl && !this.textbox && !this.textarea) {
            if (core_1.isDevMode()) {
                throw new Error("The TextBoxContainer requires an element with the kendoTextBox or kendoTextArea directive" +
                    " or a forms-bound component to function properly.");
            }
            return;
        }
        var control = this.textbox || this.textarea || this.formControl.valueAccessor;
        var setFocus = function (isFocused) { return function () {
            _this.focused = isFocused;
            _this.updateState();
            _this.changeDetectorRef.markForCheck();
        }; };
        if (control.onFocus instanceof core_1.EventEmitter) {
            var focus_1 = control.onFocus.subscribe(setFocus(true));
            this._subscriptions.push(focus_1);
        }
        if (control.onBlur instanceof core_1.EventEmitter) {
            var blur_1 = control.onBlur.subscribe(setFocus(false));
            this._subscriptions.push(blur_1);
        }
        var updateState = function () { return _this.updateState(); };
        updateState();
        if (this.formControl) {
            var s = this.formControl.valueChanges.subscribe(updateState);
            this._subscriptions.push(s);
        }
        if ('focusableId' in control) {
            if (this.id && control.focusableId) {
                // input wins
                this.id = control.focusableId;
            }
            else if (this.id) {
                control.focusableId = this.id;
            }
            else if (control.focusableId) {
                this.id = control.focusableId;
            }
            else {
                var id = "_" + dom_utils_1.guid();
                control.focusableId = id;
                this.id = id;
            }
        }
        else if ('id' in control) {
            if (this.id && control.id) {
                // input wins
                this.id = control.id;
            }
            else if (this.id) {
                control.id = this.id;
            }
            else if (control.id) {
                this.id = control.id;
            }
            else {
                var id = "_" + dom_utils_1.guid();
                control.id = id;
                this.id = id;
            }
        }
    };
    /**
     * @hidden
     */
    TextBoxContainerComponent.prototype.ngOnDestroy = function () {
        this._subscriptions.forEach(function (s) { return s.unsubscribe(); });
        this._subscriptions = [];
    };
    TextBoxContainerComponent.prototype.updateState = function () {
        var formControl = this.formControl;
        var empty = function (value) {
            // zero is not an empty value (e.g. NumericTextBox)
            if (value === 0) {
                return false;
            }
            // empty arrays are an empty value (e.g. MultiSelect)
            if (Array.isArray(value) && !value.length) {
                return true;
            }
            return !value;
        };
        if (formControl) {
            var valueAccessor = formControl.valueAccessor;
            if (isFunction(valueAccessor.isEmpty)) {
                this.empty = valueAccessor.isEmpty();
            }
            else {
                this.empty = empty(formControl.value);
            }
            this.invalid = formControl.invalid && (formControl.touched || formControl.dirty);
        }
        else if (this.textarea) {
            this.empty = empty(this.textarea.value);
        }
        else {
            this.empty = empty(this.textbox.value);
        }
        this.changeDetectorRef.markForCheck();
    };
    TextBoxContainerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'kendo-textbox-container',
                    template: "\n        <ng-content></ng-content>\n        <label *ngIf=\"floatingLabel\" [for]=\"id\" class=\"k-label\">{{ floatingLabel }}</label>\n    "
                },] },
    ];
    /** @nocollapse */
    TextBoxContainerComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer2, },
        { type: core_1.ChangeDetectorRef, },
        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [kendo_angular_l10n_1.RTL,] },] },
    ]; };
    TextBoxContainerComponent.propDecorators = {
        'hostClasses': [{ type: core_1.HostBinding, args: ['class.k-textbox-container',] },],
        'textareaElementClass': [{ type: core_1.HostBinding, args: ['class.k-textarea-wrapper',] },],
        'focusedClass': [{ type: core_1.HostBinding, args: ['class.k-state-focused',] },],
        'emptyClass': [{ type: core_1.HostBinding, args: ['class.k-state-empty',] },],
        'invalidClass': [{ type: core_1.HostBinding, args: ['class.k-state-invalid',] },],
        'direction': [{ type: core_1.HostBinding, args: ['attr.dir',] },],
        'id': [{ type: core_1.Input },],
        'floatingLabel': [{ type: core_1.Input },],
        'textbox': [{ type: core_1.ContentChild, args: [textbox_directive_1.TextBoxDirective,] },],
        'textarea': [{ type: core_1.ContentChild, args: [textarea_directive_1.TextAreaDirective,] },],
        'formControl': [{ type: core_1.ContentChild, args: [forms_1.NgControl,] },],
    };
    return TextBoxContainerComponent;
}());
exports.TextBoxContainerComponent = TextBoxContainerComponent;
