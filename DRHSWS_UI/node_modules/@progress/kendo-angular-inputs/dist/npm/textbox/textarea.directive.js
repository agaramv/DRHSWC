"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var fromEvent_1 = require("rxjs/observable/fromEvent");
var filter_1 = require("rxjs/operators/filter");
/**
 * Represents the Kendo UI TextArea directive for the Inputs components for Angular.
 * Used to add a floating label to any `textarea` element.
 *
 * @example
 * ```ts-no-run
 * <textarea kendoTextArea></textarea>
 * ```
 */
var TextAreaDirective = /** @class */ (function () {
    function TextAreaDirective(renderer, element, zone, control, rtl) {
        this.renderer = renderer;
        this.element = element;
        this.zone = zone;
        this.control = control;
        /**
         * Specifies if the `textarea` element will resize its height automatically.
         *
         * @default false
         */
        this.autoSize = false;
        /**
         * Fires each time the user focuses the `textarea` element.
         */
        this.onFocus = new core_1.EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the `textarea` element gets blurred.
         */
        this.onBlur = new core_1.EventEmitter(); //tslint:disable-line:no-output-rename
        this.listeners = [];
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(TextAreaDirective.prototype, "elementClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextAreaDirective.prototype, "value", {
        /**
         * Gets the value of the `textarea` element.
         */
        get: function () {
            return this.element.nativeElement.value;
        },
        /**
         * @hidden
         */
        set: function (text) {
            if (this.element) {
                this.element.nativeElement.value = text;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextAreaDirective.prototype, "id", {
        get: function () {
            return this.element.nativeElement.id;
        },
        set: function (id) {
            this.renderer.setAttribute(this.element.nativeElement, 'id', id);
        },
        enumerable: true,
        configurable: true
    });
    TextAreaDirective.prototype.ngOnChanges = function (changes) {
        var element = this.element.nativeElement;
        if (changes.autoSize) {
            if (this.autoSize) {
                this.initialHeight = element.offsetHeight;
                this.renderer.setStyle(element, 'resize', 'none');
            }
            else {
                this.renderer.setStyle(element, 'overflow-y', 'auto');
                this.renderer.setStyle(element, 'resize', 'both');
                element.style.height = this.initialHeight + "px";
            }
        }
        if (this.autoSize) {
            this.resize();
        }
    };
    TextAreaDirective.prototype.ngOnInit = function () {
        var _this = this;
        var element = this.element.nativeElement;
        this.listeners = [
            this.renderer.listen(element, 'focus', function () { return _this.onFocus.emit(); }),
            this.renderer.listen(element, 'blur', function () { return _this.onBlur.emit(); })
        ];
        this.zone.runOutsideAngular(function () {
            _this.inputSubscription = fromEvent_1.fromEvent(element, 'input')
                .pipe(filter_1.filter(function () { return _this.autoSize; }))
                .subscribe(function () { return _this.resize(); });
        });
        if (this.control) {
            this.valueChangeSubscription = this.control.valueChanges
                .pipe(filter_1.filter(function () { return _this.autoSize; }))
                .subscribe(function () { return _this.resize(); });
        }
    };
    TextAreaDirective.prototype.ngOnDestroy = function () {
        this.listeners.forEach(function (listener) { return listener(); });
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
    };
    TextAreaDirective.prototype.resize = function () {
        var element = this.element.nativeElement;
        this.renderer.setStyle(element, 'overflow-y', 'hidden');
        element.style.height = this.initialHeight + "px";
        var scrollHeight = element.scrollHeight;
        if (scrollHeight > this.initialHeight) {
            element.style.height = scrollHeight + "px";
        }
    };
    TextAreaDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'textarea[kendoTextArea]'
                },] },
    ];
    /** @nocollapse */
    TextAreaDirective.ctorParameters = function () { return [
        { type: core_1.Renderer2, },
        { type: core_1.ElementRef, },
        { type: core_1.NgZone, },
        { type: forms_1.NgControl, decorators: [{ type: core_1.Optional },] },
        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [kendo_angular_l10n_1.RTL,] },] },
    ]; };
    TextAreaDirective.propDecorators = {
        'elementClass': [{ type: core_1.HostBinding, args: ['class.k-textarea',] },],
        'direction': [{ type: core_1.HostBinding, args: ['attr.dir',] },],
        'autoSize': [{ type: core_1.Input },],
        'value': [{ type: core_1.Input },],
        'onFocus': [{ type: core_1.Output, args: ['focus',] },],
        'onBlur': [{ type: core_1.Output, args: ['blur',] },],
    };
    return TextAreaDirective;
}());
exports.TextAreaDirective = TextAreaDirective;
