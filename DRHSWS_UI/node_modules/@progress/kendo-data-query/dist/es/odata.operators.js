import { isPresent, isNotNullOrEmptyString } from './utils';
import { serializeFilter } from './odata-filtering.operators';
import { either, constant } from './funcs';
var serializeSort = function (orderby) {
    var str = orderby
        .filter(function (sort) { return isPresent(sort.dir); })
        .map(function (sort) {
        var order = sort.field.replace(/\./g, "/");
        return sort.dir === "desc" ? order + " desc" : order;
    }).join(",");
    return str ? "$orderby=" + str : str;
};
var emptyString = constant('');
var concat = function (a) { return function (b) { return a + b; }; };
var serializeKey = function (strings, val) { return either(isPresent, concat(strings[0]), emptyString)(val); };
var rules = function (key, state) {
    return ({
        "filter": serializeFilter(state.filter || {}),
        "skip": (_a = ["$skip=", ""], _a.raw = ["$skip=", ""], serializeKey(_a, state.skip)),
        "sort": serializeSort(state.sort || []),
        "take": (_b = ["$top=", ""], _b.raw = ["$top=", ""], serializeKey(_b, state.take))
    }[key]);
    var _a, _b;
};
/**
 * Converts a [`State`]({% slug api_kendo-data-query_state %}) into an OData v4 compatible string.
 *
 * @param {State} state - The state that will be serialized.
 * @returns {string} - The serialized state.
 */
export var toODataString = function (state) { return (Object.keys(state)
    .map(function (x) { return rules(x, state); })
    .filter(isNotNullOrEmptyString)
    .join('&')); };
